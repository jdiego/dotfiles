{
	"class": {
		"prefix": "cl",
		"body": [
			"// =====================================================================================",
			"//        Class:  ${1: ${TM_FILENAME_BASE/[\\.-]/_/g}}",
			"//  Description:  ${2}",
			"// =====================================================================================",
			"class ${1}",
			"{",
			"   public:",
			"       // ====================  LIFECYCLE     ======================================= ",
			"       ${1} () = default;",
			"       // ====================  ACCESSORS     ======================================= ",
			"       // ====================  MUTATORS      ======================================= ",
			"       // ====================  OPERATORS     ======================================= ",
			"   protected:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"   private:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"}; // -----  end of class ${1}  ----- "
		],
		"description": "Default C++ Class"
	},
	"cln": {
		"prefix": "cln",
		"body": [
			"// =====================================================================================",
			"//        Class:  ${1}",
			"//  Description:  ${2}",
			"// =====================================================================================",
			"class ${1}",
			"{",
			"   public:",
			"       // ====================  LIFECYCLE     ======================================= ",
			"       ${1} () = default;                     // Constructor",
			"       ${1} (const {1}& rhs) = default;     // Copy constructor",
			"       ~${1} () = default;                    // Destructor",
			"       // ====================  ACCESSORS     ======================================= ",
			"       // ====================  MUTATORS      ======================================= ",
			"       // ====================  OPERATORS     ======================================= ",
			"       ${1}& operator= (const {1}& rhs) = default;  // Assignment Operator",
			"   protected:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"   private:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"}; // -----  end of class ${1}  ----- "
		],
		"description": "Class using new"
	},
	"tcl": {
		"prefix": "tcl",
		"body": [
			"// =====================================================================================",
			"//        Class:  ${1}",
			"//  Description:  ${2}",
			"// =====================================================================================",
			"template <class T>",
			"class ${1}",
			"{",
			"   public:",
			"       // ====================  LIFECYCLE     ======================================= ",
			"       ${1} () = default;",
			"       // ====================  ACCESSORS     ======================================= ",
			"       // ====================  MUTATORS      ======================================= ",
			"       // ====================  OPERATORS     ======================================= ",
			"   protected:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"   private:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"}; // -----  end of class ${1}  ----- "
		],
		"description": "Template class"
	},
	"tcln": {
		"prefix": "tcln",
		"body": [
			"// =====================================================================================",
			"//        Class:  ${1}",
			"//  Description:  ${2}",
			"// =====================================================================================",
			"template <class T>",
			"class ${1}",
			"{",
			"   public:",
			"       // ====================  LIFECYCLE     ======================================= ",
			"       ${1} () = default;                     // Constructor",
			"       ${1} (const {1}& rhs) = default;     // Copy constructor",
			"       ~${1} () = default;                    // Destructor",
			"       // ====================  ACCESSORS     ======================================= ",
			"       // ====================  MUTATORS      ======================================= ",
			"       // ====================  OPERATORS     ======================================= ",
			"       ${1}& operator= (const {1}& rhs) = default;  // Assignment Operator",
			"   protected:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"   private:",
			"       // ====================  METHODS       ======================================= ",
			"       // ====================  DATA MEMBERS  ======================================= ",
			"}; // -----  end of class ${1}  ----- "
		],
		"description": "Template Class using new"
	},
	"ecl": {
		"prefix": "ecl",
		"body": [
			"// =====================================================================================",
			"//        Class:  ${1}",
			"//  Description:  ${2}",
			"// =====================================================================================",
			"class ${1}",
			"{",
  			"   public:", 
			"       $1(const std::string& msg): message{msg}",
            "       virtual ~{1} () noexcept = default",
            "       virtual std::string what() const noexcept { return message; }",
  			"   protected:",
			"      std::string  message;",
			"}; // -----  end of class  ${1}  ----- "
		],
		"description": "Error Class"
	},
	"icl": {
	  	"prefix": "icl",
	  	"body": [
	    	"//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ${1}",
	    	"// Description:  Constructor",
	    	"//--------------------------------------------------------------------------------------",
	    	"${1}::${1} ()",
	    	"{",
	    	"   ${2}",
	    	"}  // -----  end of constructor of class ${1} ----- "
	  	],
	  	"description": "Implementing class"
	},
    "icln": {
	  	"prefix": "icln",
	  	"body": [
	    	"//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ${1}",
	    	"// Description:  Constructor",
	    	"//--------------------------------------------------------------------------------------",
	    	"${1}::${1} ()",
	    	"{",
	    	"   ${2}",
	    	"}  // -----  end of constructor of class ${1} ----- ",
            "",
            "//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ${1}",
	    	"// Description:  Copy constructor",
	    	"//--------------------------------------------------------------------------------------",
	    	"${1}::${1} (const ${1}& rhs)",
	    	"{",
	    	"}  // -----  end of copy constructor of class ${1} ----- ",
            "",
            "//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ~${1}",
	    	"// Description:  Destructor",
	    	"//--------------------------------------------------------------------------------------",
	    	"${1}::~${1} ()",
	    	"{",
	    	"}  // -----  end of destructor of class  ----- ",
            "",
            "//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  operator =",
	    	"// Description:  Assignment operator",
	    	"//--------------------------------------------------------------------------------------",
	    	"${1}& ${1}::opeartor= (const ${1}& rhs)",
	    	"{",
            "   if (this != rhs)",
            "   {}",
            "   return *this",
	    	"}  // -----  end of assignment operator of template class ${1}  ----- ",
            ""

	  	],
	  	"description": "Implementing class with new "
	},
    "ticl": {
	  	"prefix": "ticl",
	  	"body": [
	    	"//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ${1}",
	    	"// Description:  Constructor",
	    	"//--------------------------------------------------------------------------------------",
            "template<typename T>",
	    	"${1}<T>::${1} ()",
	    	"{",
	    	"   ${2}",
	    	"}  // -----  end of constructor of template class ${1} ----- "
	  	],
	  	"description": "Implementing template class"
	},
    "ticln": {
	  	"prefix": "icln",
	  	"body": [
	    	"//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ${1}",
	    	"// Description:  Constructor",
	    	"//--------------------------------------------------------------------------------------",
            "template<typename T>",
	    	"${1}<T>::${1} ()",
	    	"{",
	    	"   ${2}",
	    	"}  // -----  end of constructor of template class ${1}  ----- ",
            "",
            "//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ${1}",
	    	"// Description:  Copy constructor",
	    	"//--------------------------------------------------------------------------------------",
            "template<typename T>",
	    	"${1}<T>::${1} (const ${1}& rhs)",
	    	"{",
	    	"}  // -----  end of copy constructor of template class ${1}  ----- ",
            "",
            "//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  ~${1}",
	    	"// Description:  Destructor",
	    	"//--------------------------------------------------------------------------------------",
            "template<typename T>",
	    	"${1}<T>::~${1} ()",
	    	"{",
	    	"}  // -----  end of destructor of template class ${1}  ----- ",
            "",
            "//--------------------------------------------------------------------------------------",
	    	"//       Class:  ${1}",
	    	"//      Method:  operator =",
	    	"// Description:  Assignment operator",
	    	"//--------------------------------------------------------------------------------------",
            "template<typename T>",
	    	"${1}<T>& ${1}<T>::opeartor= (const ${1}& rhs)",
	    	"{",
            "   if (this != rhs)",
            "   {}",
            "   return *this",
	    	"}  // -----  end of assignment operator of template class ${1}  ----- ",
            ""

	  	],
	  	"description": "Implementing template class with new "
	},
    "cfu": {
        "prefix": "cfu",
        "body": [
          "// ===  FUNCTION  ======================================================================",
          "//         Name:  ${1}",
          "//  Description:  {2}",
          "// =====================================================================================",
          ""
        ],
        "description": "Comments function"
    },
    "cme": {
        "prefix": "cme",
        "body": [
          "//--------------------------------------------------------------------------------------",
          "//        Class:  ${1}",
          "//       Method:  ${2}",
          "//  Description:  ${3}",
          "//--------------------------------------------------------------------------------------",
          ""
        ],
        "description": "Comments method"
    },
    "cfdh": {
        "prefix": "cfdh",
        "body": [
          "// =====================================================================================",
          "//",
          "//       Filename:  ${TM_FILENAME}",
          "//",
          "//    Description:  ${1}",
          "//",
          "//        Version:  1.0",
          "//        Created:  ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR} ${CURRENT_HOUR}:${CURRENT_MINUTE}",
          "//       Revision:  none",
          "//",
          "//         Author:  Diego Saraiva (diegosaraiva@gmail.com)",
          "// =====================================================================================",
          ""
        ],
        "description": "Comments file description header"
      }
}
